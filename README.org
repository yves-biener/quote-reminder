#+title: Quote Reminder
#+author: Yves Biener
#+email: yves.biener@gmx.de
#+options: toc:nil
#+toc: headlines 5

* What is this project about?

Quote reminder is a tool which allows me to remind myself about all my book
quotes I highlight. It stores the quotes in a database and can send reminder
(e.g. daily, weekly, etc.) per mail for a specified number of quotes. They can
be choosen at random or by defined rules, like they are all from one topic or
all from different topics.

* What does the database store?

The database stores various information along the quote itself. The database
should be a relational database. It stores three tables for ~Quote~'s, ~Book~'s,
~Author~'s, ~Topic~'s and ~Language~'s in the following way:

+ Quotes
  + Id (PK auto-increment)
  + BookId (FK)
  + Quote (not null, not empty)
  + Page (not null, not empty)
  + RecordDate (default: current time)

+ Books
  + Id (PK auto-increment)
  + AuthorId (FK, not null)
  + TopicId (FK, not null)
  + ISBN (unique)
  + Title (not null)
  + LanguageId (FK, not null)
  + ReleaseDate (not null)

+ Authors
  + ID (PK auto-increment)
  + Name (not null, unique)

+ Topics
  + Id (PK auto-increment)
  + Topic (not null, unique)

+ Languages
  + ID (PK auto-increment)
  + Language (not null, unique)

* Provided services

This application provides two services, which work independenly from each other,
but both use the same underlying database. The first service provides an RESTful
api to view and modify the contents of the database, while the second service
automatically sends the actual reminders for the quotes per mail.

** REST Api

The basic api provides functionalities for getting, posting and deleting quotes.
To see the available api endpoints, lauch the main.go application and visit the
root page. On a local machine this would be `http://localhost/`. The
configuration for the server, see ~server-config.json~ for an example.

** Mail reminder

The reminding part of this project is achieved by sending mails in a regular
interval per mail. All the required information, like where to send the mail,
from which mail provider, in which time interval, how many quotes, if they
should be related to a certain topic, if they should not repeat, etc. is all
user configurable. To see an example of the possible configurations see
~test-config.json~. You will need to create an ~config.json~ file just like that
test file in order to run the mail module correctly (see =main.go=).
